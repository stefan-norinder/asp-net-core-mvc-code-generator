// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CodeGenerator.Lib.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Stefan Adm\code\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\LayoutViewTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class LayoutViewTemplate : LayoutViewTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("@* --------------------------------------------------------------------*@\r\n@* War" +
                    "ning! This is an auto generated file. Changes may be overwritten *@\r\n@* --------" +
                    "------------------------------------------------------------*@\r\n\r\n@using Microso" +
                    "ft.AspNetCore.Localization\r\n@using Microsoft.AspNetCore.Http.Extensions\r\n@using " +
                    "Localization\r\n@inject LocService SharedLocalizer\r\n\r\n@{\r\n    var httpContext = Vi" +
                    "ewContext.HttpContext;\r\n    var currentCulture = httpContext.Features.Get<IReque" +
                    "stCultureFeature>().RequestCulture.UICulture;\r\n    var currentUrl = UriHelper.Bu" +
                    "ildRelative(httpContext.Request.PathBase, httpContext.Request.Path, httpContext." +
                    "Request.QueryString);\r\n}\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta" +
                    " charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, init" +
                    "ial-scale=1.0\" />\r\n    <title>@ViewData[\"Title\"]</title>\r\n    <link rel=\"stylesh" +
                    "eet\" href=\"~/lib/bootstrap/dist/css/bootstrap.min.css\" />\r\n    <link rel=\"styles" +
                    "heet\" href=\"~/css/site.css\" />\r\n    <link rel=\"stylesheet\" href=\"~/css/custom-si" +
                    "te.css\" />\r\n    <link rel=\"stylesheet\" href=\"https://cdn.datatables.net/1.11.5/c" +
                    "ss/jquery.dataTables.min.css\" type=\"text/css\" />\r\n    <link rel=\"stylesheet\" hre" +
                    "f=\"https://cdn.datatables.net/buttons/2.2.2/css/buttons.dataTables.min.css\" type" +
                    "=\"text/css\" />\r\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bo" +
                    "otstrap-icons@1.8.1/font/bootstrap-icons.css\" type=\"text/css\" />\r\n</head>\r\n<body" +
                    ">\r\n    <header>\r\n        <nav class=\"navbar navbar-expand-sm navbar-toggleable-s" +
                    "m navbar-light bg-white border-bottom box-shadow mb-3\">\r\n            <div class=" +
                    "\"container\">\r\n                <a class=\"navbar-brand\" asp-controller=\"Home\" asp-" +
                    "action=\"Index\"><span class=\"bi bi-gem\"></span></a>\r\n                <button clas" +
                    "s=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\".navbar-col" +
                    "lapse\" aria-controls=\"navbarSupportedContent\"\r\n                        aria-expa" +
                    "nded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span class=\"n" +
                    "avbar-toggler-icon\"></span>\r\n                </button>\r\n                <div cla" +
                    "ss=\"navbar-collapse collapse d-sm-inline-flex justify-content-between\">\r\n       " +
                    "             <ul class=\"navbar-nav flex-grow-1\">\r\n                        <li cl" +
                    "ass=\"nav-item\">\r\n                            <a class=\"nav-link text-dark\" asp-a" +
                    "rea=\"\" asp-controller=\"Home\" asp-action=\"Index\">@SharedLocalizer.GetLocalizedHtm" +
                    "lString(\"ApplicationName\")</a>\r\n                       </li>\r\n                  " +
                    "  </ul>\r\n                </div>                \r\n                <div>\r\n        " +
                    "            <form id=\"changeLanguageFormId\" asp-controller=\"Home\" asp-action=\"To" +
                    "ggleCulture\" method=\"post\">\r\n                        <input type=\"hidden\" name=\"" +
                    "returnUrl\" value=\"@currentUrl\">\r\n                        <span id=\"iconLanguageI" +
                    "d\" class=\"bi bi-gem icon-language\" title=\"@SharedLocalizer.GetLocalizedHtmlStrin" +
                    "g(\"Toggle language\")\"  ></span>\r\n                    </form>\r\n                </" +
                    "div>\r\n            </div>\r\n        </nav>\r\n    </header>\r\n    <div class=\"contain" +
                    "er\">\r\n        <main role=\"main\" class=\"pb-3\">\r\n            @RenderBody()\r\n      " +
                    "  </main>\r\n    </div>    \r\n    <div class=\"clear\"></div>\r\n    <footer class=\"bor" +
                    "der-top footer text-muted\">\r\n        <div class=\"container\">\r\n            &copy;" +
                    " 2022 \r\n        </div>\r\n    </footer>\r\n    <script src=\"~/lib/jquery/dist/jquery" +
                    ".min.js\"></script>\r\n    <script src=\"~/lib/bootstrap/dist/js/bootstrap.bundle.mi" +
                    "n.js\"></script>\r\n     <script src=\"https://cdn.datatables.net/1.12.0/js/jquery.d" +
                    "ataTables.min.js\"></script>\r\n    <script src=\"https://cdn.datatables.net/buttons" +
                    "/2.2.2/js/dataTables.buttons.min.js\"></script>\r\n    <script src=\"https://cdn.dat" +
                    "atables.net/buttons/2.2.2/js/buttons.html5.min.js\"></script>\r\n    <script src=\"h" +
                    "ttps://cdn.datatables.net/buttons/2.2.2/js/buttons.colVis.min.js\"></script>\r\n   " +
                    " <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js\"><" +
                    "/script>\r\n    <script src=\"https://cdn.datatables.net/buttons/2.2.3/js/buttons.p" +
                    "rint.min.js\"></script>\r\n    <script src=\"~/js/site.js\" asp-append-version=\"true\"" +
                    "></script>\r\n    <script src=\"~/js/custom-site.js\" asp-append-version=\"true\"></sc" +
                    "ript>\r\n    @await RenderSectionAsync(\"Scripts\", required: false)\r\n</body>\r\n</htm" +
                    "l>\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class LayoutViewTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
