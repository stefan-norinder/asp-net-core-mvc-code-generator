// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CodeGenerator.Lib.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\StefanAdmin\code2\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\StartupTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class StartupTemplate : StartupTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 6 "C:\Users\StefanAdmin\code2\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeGeneratorHelper.GetTemplateHeaderText()));
            
            #line default
            #line hidden
            this.Write(@" 

using AutoMapper;
using Localization;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Diagnostics;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Localization;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection; 
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using ");
            
            #line 20 "C:\Users\StefanAdmin\code2\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(namespaceName));
            
            #line default
            #line hidden
            this.Write(".Logic.DataAccess;\r\nusing ");
            
            #line 21 "C:\Users\StefanAdmin\code2\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(namespaceName));
            
            #line default
            #line hidden
            this.Write(".Logic.Http;\r\nusing ");
            
            #line 22 "C:\Users\StefanAdmin\code2\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(namespaceName));
            
            #line default
            #line hidden
            this.Write(".Logic.Model;\r\nusing ");
            
            #line 23 "C:\Users\StefanAdmin\code2\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(namespaceName));
            
            #line default
            #line hidden
            this.Write(".Logic.Services;\r\nusing ");
            
            #line 24 "C:\Users\StefanAdmin\code2\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(namespaceName));
            
            #line default
            #line hidden
            this.Write(".Logic.Settings;\r\nusing ");
            
            #line 25 "C:\Users\StefanAdmin\code2\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(namespaceName));
            
            #line default
            #line hidden
            this.Write(@".Web.ViewModel;
using System.Collections.Generic;
using System.Globalization;
using System.Net;
using System.Threading.Tasks;
using System;
using System.IO;
using Microsoft.AspNetCore.Html;
using Microsoft.AspNetCore.Mvc.Rendering;
using System.Reflection;
using System.Linq;
using Newtonsoft.Json;
using System.Data;
using System.Data.SqlClient;

namespace ");
            
            #line 40 "C:\Users\StefanAdmin\code2\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(namespaceName));
            
            #line default
            #line hidden
            this.Write(@".Web
{
    public class Startup
    {       
        public Startup(IConfiguration configuration, IWebHostEnvironment environment)
        {
            Configuration = configuration;
            Environment = environment;
        }

        public IConfiguration Configuration { get; }
        public IWebHostEnvironment Environment { get; }

        public void ConfigureServices(IServiceCollection services)
        {
");
            
            #line 55 "C:\Users\StefanAdmin\code2\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\StartupTemplate.tt"
 foreach(var item in Model) { 
            
            #line default
            #line hidden
            this.Write("            #region register ");
            
            #line 56 "C:\Users\StefanAdmin\code2\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write("\r\n            services.AddTransient<I");
            
            #line 57 "C:\Users\StefanAdmin\code2\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write("Service, ");
            
            #line 57 "C:\Users\StefanAdmin\code2\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write("Service>();\r\n            services.AddTransient<I");
            
            #line 58 "C:\Users\StefanAdmin\code2\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write("HttpService, ");
            
            #line 58 "C:\Users\StefanAdmin\code2\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write("HttpService>();\r\n            services.AddTransient<I");
            
            #line 59 "C:\Users\StefanAdmin\code2\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write("DataAccess, ");
            
            #line 59 "C:\Users\StefanAdmin\code2\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write("DataAccess>();\r\n            services.AddSingleton<SqlStringBuilder<");
            
            #line 60 "C:\Users\StefanAdmin\code2\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write(">>();\r\n            #endregion\r\n\r\n");
            
            #line 63 "C:\Users\StefanAdmin\code2\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\StartupTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("            #region register Middleware services\r\n            services.AddTransie" +
                    "nt<ICleanUpService, CleanUpService>();\r\n            services.AddTransient<IVersi" +
                    "onInfoService, VersionInfoService>();\r\n            #endregion\r\n\r\n            ser" +
                    "vices.AddSingleton<LocService>();\r\n            services.AddTransient<IHttpClient" +
                    ", Logic.Http.HttpClient>();\r\n            services.Configure<AuthenticationSettin" +
                    "gs>(Configuration.GetSection(\"Authentication\"));\r\n            services.Configure" +
                    "<ApplicationSettings>(Configuration.GetSection(\"Application\"));\r\n            ser" +
                    "vices.AddTransient<ISqlDataAccess, SqlDataAccess>();\r\n            \r\n            " +
                    "services.AddHttpClient();\r\n            services.AddSingleton(GetMapper());\r\n    " +
                    "        ConfigureLocalization(services);\r\n            services.AddLocalization(x" +
                    " => x.ResourcesPath = \"Resources\");\r\n            CustomServiceConfiguration(serv" +
                    "ices);\r\n            services.AddControllersWithViews()\r\n                .AddView" +
                    "Localization();\r\n        }\r\n\r\n        public void Configure(IApplicationBuilder " +
                    "app, IWebHostEnvironment env)\r\n        {\r\n            app.UseHttpsRedirection();" +
                    "\r\n            app.UseStaticFiles();\r\n            app.UseRouting();\r\n            " +
                    "app.UseRequestLocalization();  \r\n            RegisterMiddleware(app);\r\n         " +
                    "   ConfigureExceptionHandler(app);\r\n            CustomConfiguration(app, env); \r" +
                    "\n\r\n            app.UseEndpoints(endpoints =>\r\n            {\r\n                end" +
                    "points.MapControllerRoute(\r\n                    name: \"default\",\r\n              " +
                    "      pattern: \"{controller=Home}/{action=Index}/{id?}\");\r\n            });\r\n    " +
                    "    }\r\n\r\n        protected virtual void CustomServiceConfiguration(IServiceColle" +
                    "ction services)\r\n        {\r\n            //override for custom behaviour\r\n       " +
                    " }\r\n\r\n        protected virtual void CustomConfiguration(IApplicationBuilder app" +
                    ", IWebHostEnvironment env)\r\n        {\r\n            //override for custom behavio" +
                    "ur\r\n        }\r\n\r\n        protected virtual void RegisterMiddleware(IApplicationB" +
                    "uilder app)\r\n        {\r\n            app.UseMiddleware<Version>();\r\n            a" +
                    "pp.UseMiddleware<CleanUp>();\r\n            app.UseMiddleware<RedirectNotFound>();" +
                    "\r\n            app.UseMiddleware<RedirectTablelang>();\r\n        }\r\n        \r\n    " +
                    "     protected void ConfigureLocalization(IServiceCollection services)\r\n        " +
                    "{\r\n            var supportedCultures = GetSupportedLanguages();\r\n\r\n            s" +
                    "ervices.Configure((Action<RequestLocalizationOptions>)(options =>\r\n            {" +
                    "\r\n                options.DefaultRequestCulture = GetDefaultCulture();\r\n        " +
                    "        options.SupportedCultures = supportedCultures;\r\n                options." +
                    "SupportedUICultures = supportedCultures;\r\n                options.RequestCulture" +
                    "Providers = new List<IRequestCultureProvider>\r\n                {\r\n              " +
                    "    new QueryStringRequestCultureProvider(),\r\n                  new CookieReques" +
                    "tCultureProvider()\r\n                };\r\n            }));\r\n        }\r\n\r\n        p" +
                    "rotected virtual RequestCulture GetDefaultCulture() => new RequestCulture(\"en-gb" +
                    "\");\r\n\r\n        protected virtual IList<CultureInfo> GetSupportedLanguages()\r\n   " +
                    "     {\r\n            return new List<CultureInfo> {\r\n                new CultureI" +
                    "nfo(\"en-gb\")\r\n            };\r\n        }\r\n\r\n        protected virtual void Config" +
                    "ureExceptionHandler(IApplicationBuilder app)\r\n        {\r\n            app.UseExce" +
                    "ptionHandler(builder =>\r\n            {\r\n                builder.Run(async contex" +
                    "t =>\r\n                {\r\n                    var e = context.Features.Get<IExcep" +
                    "tionHandlerFeature>();\r\n                    if (e == null) return;\r\n            " +
                    "        context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;\r\n" +
                    "                    context.Response.ContentType = \"text/html\";\r\n               " +
                    "     var factory = builder.ApplicationServices.GetService<ILoggerFactory>();\r\n  " +
                    "                  var logger = factory.CreateLogger(\"ExceptionLogger\");\r\n       " +
                    "             logger.LogError(e.Error, e.Error.Message);\r\n                    con" +
                    "text.Response.Redirect(\"/error\");\r\n                });\r\n            });\r\n       " +
                    " }\r\n\r\n        public virtual IMapper GetMapper()\r\n        {\r\n            var map" +
                    "perConfig = new MapperConfiguration(mc =>\r\n            {\r\n                mc.Add" +
                    "Profile(new MappingConfiguration());\r\n            });\r\n\r\n            return mapp" +
                    "erConfig.CreateMapper();\r\n        }\r\n    }\r\n\r\n    public class MappingConfigurat" +
                    "ion : Profile\r\n    {\r\n        public MappingConfiguration()\r\n        {\r\n        " +
                    "\r\n");
            
            #line 180 "C:\Users\StefanAdmin\code2\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\StartupTemplate.tt"
 foreach(var item in Model) { 
            
            #line default
            #line hidden
            this.Write("                CreateMap<");
            
            #line 181 "C:\Users\StefanAdmin\code2\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 181 "C:\Users\StefanAdmin\code2\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write("ViewModel>();\r\n\r\n                CreateMap<");
            
            #line 183 "C:\Users\StefanAdmin\code2\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write("ViewModel, ");
            
            #line 183 "C:\Users\StefanAdmin\code2\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write(">();\r\n        \r\n");
            
            #line 185 "C:\Users\StefanAdmin\code2\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\StartupTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    \r\n        }\r\n    }\r\n\r\n    public static class CustomHtmlHelpers\r\n    {\r\n     " +
                    "   public static async Task<IHtmlContent> GetExternalHtmlAsync(this IHtmlHelper " +
                    "helper, string url)\r\n        {\r\n            try\r\n            {\r\n                " +
                    "using var httpClient = new System.Net.Http.HttpClient();\r\n                var ht" +
                    "ml = await httpClient.GetStringAsync(url);\r\n                return new HtmlStrin" +
                    "g(html);\r\n            }\r\n            catch\r\n            {\r\n                retur" +
                    "n new HtmlString(\"<!-- Error loading external HTML -->\");\r\n            }\r\n      " +
                    "  }\r\n    }\r\n\r\n    #region middleware\r\n\r\n    public class RedirectNotFound\r\n    {" +
                    "\r\n        private readonly RequestDelegate next;\r\n        private readonly Appli" +
                    "cationSettings applicationSettings;\r\n\r\n        public RedirectNotFound(RequestDe" +
                    "legate next, IOptions<ApplicationSettings> options)\r\n        {\r\n            this" +
                    ".next = next;\r\n            applicationSettings = options.Value;\r\n        }\r\n\r\n  " +
                    "      public async Task InvokeAsync(HttpContext context)\r\n        {\r\n           " +
                    " await next.Invoke(context);\r\n            \r\n            if (context.Response.Sta" +
                    "tusCode == 404 && !context.Response.HasStarted && !context.Request.Path.Value.Co" +
                    "ntains(\"notfound\"))\r\n            {\r\n                context.Response.Redirect($\"" +
                    "/notfound?page={context.Request.Path}\");\r\n            }\r\n        }\r\n    }\r\n\r\n   " +
                    " public class RedirectTablelang\r\n    {\r\n        private readonly RequestDelegate" +
                    " next;\r\n        private readonly ApplicationSettings applicationSettings;\r\n\r\n   " +
                    "     public RedirectTablelang(RequestDelegate next, IOptions<ApplicationSettings" +
                    "> options)\r\n        {\r\n            this.next = next;\r\n            applicationSet" +
                    "tings = options.Value;\r\n        }\r\n\r\n        public async Task InvokeAsync(HttpC" +
                    "ontext context)\r\n        {\r\n            const string resourceBase = \"/resources\"" +
                    ";\r\n            var applicationName = applicationSettings.Name;\r\n            var " +
                    "path = context.Request.Path;\r\n            var tableLangPath = $\"{applicationName" +
                    "}{resourceBase}\";\r\n            if (path.Value.EndsWith(resourceBase, StringCompa" +
                    "rison.InvariantCultureIgnoreCase) &&\r\n                !path.Value.Equals(tableLa" +
                    "ngPath, StringComparison.InvariantCultureIgnoreCase) &&\r\n                !path.V" +
                    "alue.Equals(resourceBase, StringComparison.InvariantCultureIgnoreCase))\r\n       " +
                    "     {\r\n                context.Response.StatusCode = 302;\r\n                cont" +
                    "ext.Response.Headers[\"Location\"] = tableLangPath;\r\n                return;\r\n    " +
                    "        }\r\n            await next.Invoke(context);\r\n        }\r\n    }\r\n\r\n    \r\n\r\n" +
                    "    #region clean-up\r\n    public interface ICleanUp\r\n    {\r\n        Task InvokeA" +
                    "sync(HttpContext context);\r\n    }\r\n\r\n    public class CleanUp : ICleanUp\r\n    {\r" +
                    "\n        private readonly RequestDelegate next;\r\n        private readonly IClean" +
                    "UpService cleanUpService;\r\n\r\n        public CleanUp(RequestDelegate next, IClean" +
                    "UpService cleanUpService)\r\n        {\r\n            this.next = next;\r\n           " +
                    " this.cleanUpService = cleanUpService;\r\n        }\r\n\r\n        public async Task I" +
                    "nvokeAsync(HttpContext context)\r\n        {\r\n            if (context.Request.Path" +
                    ".Value.EndsWith(\"clean-up\", StringComparison.InvariantCultureIgnoreCase))\r\n     " +
                    "       {\r\n                await cleanUpService.ProcessCleanUp();\r\n              " +
                    "  context.Response.StatusCode = StatusCodes.Status200OK;\r\n                await " +
                    "context.Response.WriteAsync(\"Clean-up ok.\");\r\n            }\r\n            else\r\n " +
                    "           {\r\n                await next.Invoke(context);\r\n            }\r\n      " +
                    "  }\r\n    }\r\n    public interface ICleanUpService\r\n    {\r\n        Task ProcessCle" +
                    "anUp();\r\n    }\r\n    public class CleanUpService : ICleanUpService\r\n    {\r\n      " +
                    "  private readonly ApplicationSettings applicationSettings;\r\n\r\n        public Cl" +
                    "eanUpService(IOptions<ApplicationSettings> options)\r\n        {\r\n            this" +
                    ".applicationSettings = options.Value;\r\n        }\r\n\r\n        public virtual async" +
                    " Task ProcessCleanUp()\r\n        {\r\n            string path = Path.Combine(AppCon" +
                    "text.BaseDirectory, \"logs\");\r\n\r\n            var directory = new DirectoryInfo(pa" +
                    "th);\r\n\r\n            foreach (var file in directory.GetFiles())\r\n            {\r\n " +
                    "               if (file.LastAccessTime < DateTime.Today.AddDays(-applicationSett" +
                    "ings.KeepLogsInDays))\r\n                {\r\n                    await Task.Run(() " +
                    "=> file.Delete());\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    " +
                    "#endregion\r\n    \r\n    #region version middleware\r\n\r\n\r\n    public class Version\r\n" +
                    "    {\r\n        private readonly RequestDelegate next;\r\n        private readonly " +
                    "IVersionInfoService versionInfoService;\r\n\r\n        public Version(RequestDelegat" +
                    "e next,\r\n            IVersionInfoService versionInfoService)\r\n        {\r\n       " +
                    "     this.next = next;\r\n            this.versionInfoService = versionInfoService" +
                    ";\r\n        }\r\n\r\n        public async Task InvokeAsync(HttpContext context)\r\n    " +
                    "    {\r\n            if (context.Request.Path.Value.EndsWith(\"version\", StringComp" +
                    "arison.InvariantCultureIgnoreCase))\r\n            {\r\n                var versionI" +
                    "nformation = await versionInfoService.GetVersionInformation();\r\n                " +
                    "context.Response.StatusCode = StatusCodes.Status200OK;\r\n                await co" +
                    "ntext.Response.WriteAsync(versionInformation);\r\n            }\r\n            else\r" +
                    "\n            {\r\n                await next.Invoke(context);\r\n            }\r\n    " +
                    "    }\r\n\r\n\r\n    }\r\n\r\n    public interface IVersionInfoService\r\n    {\r\n        Tas" +
                    "k<string> GetVersionInformation();\r\n    }\r\n\r\n    public class VersionInfoService" +
                    " : IVersionInfoService\r\n    {\r\n        private readonly IMigrationDataAccess mig" +
                    "rationDataAccess;\r\n        protected readonly ApplicationSettings applicationSet" +
                    "tings;\r\n\r\n        public VersionInfoService(IOptions<ApplicationSettings> option" +
                    "s,\r\n            IMigrationDataAccess migrationDataAccess)\r\n        {\r\n          " +
                    "  this.migrationDataAccess = migrationDataAccess;\r\n            applicationSettin" +
                    "gs = options.Value;\r\n        }\r\n\r\n        public virtual async Task<string> GetV" +
                    "ersionInformation()\r\n        {\r\n            var assembly = Assembly.GetEntryAsse" +
                    "mbly();\r\n            var version = assembly.GetName().Version.ToString();\r\n\r\n   " +
                    "         var versionInfo = new VersionInfo\r\n            {\r\n                Servi" +
                    "ceName = applicationSettings.Name\r\n            };\r\n\r\n            var migration =" +
                    " (await migrationDataAccess.GetAll()).OrderByDescending(x => x.CreatedOn).FirstO" +
                    "rDefault();\r\n            if (migration != null)\r\n            {\r\n                " +
                    "versionInfo.ClientVersion = migration.ClientVersion;\r\n                versionInf" +
                    "o.DatabaseVersion = migration.DatabaseVersion;\r\n            }\r\n\r\n            ver" +
                    "sionInfo.Assemblies.Add(new AssemblyInfo\r\n            {\r\n                Name = " +
                    "assembly.GetName().Name,\r\n                Version = version\r\n            });\r\n\r\n" +
                    "            var referencedAssemblies = assembly.GetReferencedAssemblies();\r\n    " +
                    "        foreach (var referencedAssembly in referencedAssemblies)\r\n            {\r" +
                    "\n                if (referencedAssembly.Name.StartsWith(\"Sh.Library.\") || refere" +
                    "ncedAssembly.Name.StartsWith(\"Logic\"))\r\n                {\r\n                    v" +
                    "ersionInfo.Assemblies.Add(new AssemblyInfo\r\n                    {\r\n             " +
                    "           Name = referencedAssembly.Name,\r\n                        Version = re" +
                    "ferencedAssembly.Version.ToString()\r\n                    });\r\n                }\r" +
                    "\n            }\r\n            var settings = new JsonSerializerSettings { Formatti" +
                    "ng = Formatting.Indented };\r\n            return JsonConvert.SerializeObject(vers" +
                    "ionInfo, settings);\r\n        }\r\n    }\r\n\r\n    public class VersionInfo\r\n    {\r\n  " +
                    "      public string ServiceName { get; set; }\r\n        public string ClientVersi" +
                    "on { get; set; }\r\n        public string DatabaseVersion { get; set; }\r\n        p" +
                    "ublic List<AssemblyInfo> Assemblies { get; set; } = new List<AssemblyInfo>();\r\n " +
                    "   }\r\n\r\n    public class AssemblyInfo\r\n    {\r\n        public string Name { get; " +
                    "set; }\r\n        public string Version { get; set; }\r\n    }\r\n\r\n    #endregion\r\n\r\n" +
                    "    #endregion\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class StartupTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
