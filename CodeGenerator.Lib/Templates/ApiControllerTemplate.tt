<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
//---------------------------------------------------------------------------------------
// This is an auto generated file. Don't make any changes because they may be overwritten
//---------------------------------------------------------------------------------------

using <#= namespaceName #>.Lib.Model;
using <#= namespaceName #>.Lib.Service;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace <#= namespaceName #>.Web.ApiController
{ 
    [Route("api/v1/[controller]")]
    [ApiController]
    public class <#= Model.Name #>Controller: ControllerBase
    {
        private readonly ILogger<<#= Model.Name #>Controller> logger;
        private readonly I<#= Model.Name #>Service service;

        public <#= Model.Name #>Controller(ILogger<<#= Model.Name #>Controller> logger, I<#= Model.Name #>Service service)
        {
            this.logger = logger;
            this.service = service;
        }

        [HttpGet]
        public async Task<IEnumerable<string>> Get()
        {
            var items = await service.GetAll();
            return JsonConvert.SerializeObject(items);
        }

        [HttpGet("{id}")]
        public async Task<string> Get(int id)
        {
            var item = await service.Get(id);
            return JsonConvert.SerializeObject(item);
        }

        [HttpPost]
        public async Task Post([FromBody] string value)
        {
           var item = JsonConvert.DeserializeObject<<#= Model.Name #>>(value);
           await service.Insert(item);
        }

        [HttpPut("{id}")]
        public async Task Put(int id, [FromBody] string value)
        {
           var item = JsonConvert.DeserializeObject<<#= Model.Name #>>(value);
           await service.Update(id, item);
        }

        [HttpDelete("{id}")]
        public async Task Delete(int id)
        {
               await service.Delete(id);
        }
    }
}