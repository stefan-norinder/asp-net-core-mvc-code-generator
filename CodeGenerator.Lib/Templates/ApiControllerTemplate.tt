<#@ template language="C#" #>
<#@ assembly name="CodeGenerator.Lib" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#= CodeGeneratorHelper.GetTemplateHeaderText() #>

using <#= namespaceName #>.Logic.Model;
using <#= namespaceName #>.Logic.Services;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.Threading.Tasks;
using System;
using System.Linq;
using Microsoft.AspNetCore.Http;

namespace <#= namespaceName #>.Web.ApiController
{ 
        [Route("api/v1/[controller]s")]
        [ApiController]
        public class <#= Model.Name #>Controller: ControllerBase
        {
            private readonly ILogger<<#= Model.Name #>Controller> logger;
            private readonly I<#= Model.Name #>Service service;

            public <#= Model.Name #>Controller(ILogger<<#= Model.Name #>Controller> logger, I<#= Model.Name #>Service service)
            {
                this.logger = logger;
                this.service = service;
            }

        [HttpGet]
        public async Task<IActionResult> Get()
        {
            var items = await service.GetAll();
            if (!items.Any()) return NotFound();
            return base.Ok(items);
            
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> Get(int id)
        {
            
            var item = await service.Get(id);
            if (item == null) return NotFound();
            return Ok(item);
            
        }

        [HttpPost]
        public async Task<IActionResult> Post([FromBody] dynamic value)
        {
            var item = JsonConvert.DeserializeObject<<#= Model.Name #>>(value.ToString());
            var newItem = await service.Insert(item);
            return CreatedAtAction(nameof(Post), new {id = newItem.Id }, newItem);
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> Put(int id, [FromBody] dynamic value)
        {
            if (!await service.Exists(id)) return NotFound();
            var item = JsonConvert.DeserializeObject<<#= Model.Name #>>(value.ToString());
            item.Id = id;
            await service.Update(item);
            return StatusCode(StatusCodes.Status204NoContent);
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
            if (!await service.Exists(id)) return NotFound();
            await service.Delete(id);
            return StatusCode(StatusCodes.Status204NoContent);
        }
    }
}