<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
//---------------------------------------------------------------------------------------
// Warning! This is an auto generated file. Changes may be overwritten 
//---------------------------------------------------------------------------------------

using <#= namespaceName #>.Logic.DataAccess;
using <#= namespaceName #>.Logic.Model;
using <#= namespaceName #>.Logic.Services;
using Microsoft.Extensions.Logging;
using Moq;
using NUnit.Framework;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq;
using System;

namespace <#= namespaceName #>.Test
{    
    public class <#= Model.Name #>ServiceTests
    {
        private Mock<ILogger<<#= Model.Name #>Service>> loggerMock;
        private Mock<I<#= Model.Name #>DataAccess> dataAccessMock;

        [SetUp]
        public void Setup()
        {
            loggerMock = new Mock<ILogger<<#= Model.Name #>Service>>();
            dataAccessMock = new Mock<I<#= Model.Name #>DataAccess>();
        }

        [Test]
        public void Initiate_SholdNotBeNull()
        {
            var sut = new <#= Model.Name #>Service(loggerMock.Object, dataAccessMock.Object);
            Assert.IsNotNull(sut);
        }
        
        [Test]
        public async Task Get<#= Model.Name #>_SholdNotBeNull()
        {
            dataAccessMock.Setup(x => x.Get(It.IsAny<int>())).Returns(Task.FromResult(new <#= Model.Name #> { Id = 2 }));
            var sut = new <#= Model.Name #>Service(loggerMock.Object, dataAccessMock.Object);
            var result = await sut.Get(2);
            Assert.NotNull(result);
            Assert.AreEqual(2, result.Id);
            loggerMock.VerifyLoggingExact(LogLevel.Information, "Fetching entity with id 2 from data source.");
        }

        [Test]
        public async Task GetAll<#= Model.Name #>s_SholdContainEntities()
        {
            var testData = new List<<#= Model.Name #>>
            {
                new <#= Model.Name #>{ Id = 1 },
                new <#= Model.Name #>{ Id = 2 },
                new <#= Model.Name #>{ Id = 3 }
            };
            dataAccessMock.Setup(x => x.GetAll()).Returns(Task.FromResult(testData.AsEnumerable()));
            var sut = new <#= Model.Name #>Service(loggerMock.Object, dataAccessMock.Object);
            var result = await sut.GetAll();
            Assert.AreEqual(3, result.Count());
            Assert.AreEqual(1, result.First().Id);
            Assert.AreEqual(3, result.Last().Id);
            loggerMock.VerifyLoggingExact(LogLevel.Information, "Fetching all entities from data source.");
        }

        [Test]
        public async Task Insert<#= Model.Name #>_VerifyInsertIsCalled()
        {
            var sut = new <#= Model.Name #>Service(loggerMock.Object, dataAccessMock.Object);
            await sut.Insert(new <#= Model.Name #> { Id = 2 });
            dataAccessMock.Verify(x => x.Insert(It.Is<<#= Model.Name #>>(y => y.Id == 2)));
            loggerMock.VerifyLoggingContains(LogLevel.Information, "Saving entity");
        }

        [Test]
        public async Task Update<#= Model.Name #>_VerifyUpdateIsCalled()
        {
            var sut = new <#= Model.Name #>Service(loggerMock.Object, dataAccessMock.Object);
            await sut.Update(new <#= Model.Name #> { Id = 5 });
            dataAccessMock.Verify(x => x.Update(It.Is<<#= Model.Name #>>(y => y.Id == 5)));
            loggerMock.VerifyLoggingContains(LogLevel.Information, "Update entity");
        }

        [Test]
        public async Task Delete<#= Model.Name #>_VerifyDeleteIsCalled()
        {
            var sut = new <#= Model.Name #>Service(loggerMock.Object, dataAccessMock.Object);
            await sut.Delete(9);
            dataAccessMock.Verify(x => x.Delete(It.Is<int>(y => y == 9)));
            loggerMock.VerifyLoggingExact(LogLevel.Information, "Deleting entity with id 9 from data source.");
        }
    }
}
