<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="CodeGenerator.Lib.Services" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#= CodeGeneratorHelper.GetTemplateHeaderText() #> 

using <#= namespaceName #>.Logic.DataAccess;
using <#= namespaceName #>.Logic.Model;
using <#= namespaceName #>.Logic.Services;
using Microsoft.Extensions.Logging;
using Moq;
using NUnit.Framework;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq;
using System;

namespace <#= namespaceName #>.Test
{    
    public class <#= Model.Name #>ServiceTests
    {
        private Mock<ILogger<<#= Model.Name #>Service>> loggerMock;
        private Mock<I<#= Model.Name #>DataAccess> dataAccessMock;

        [SetUp]
        public void Setup()
        {
            loggerMock = new Mock<ILogger<<#= Model.Name #>Service>>();
            dataAccessMock = new Mock<I<#= Model.Name #>DataAccess>();
        }

        [Test]
        public void Initiate_SholdNotBeNull()
        {
            var sut = new <#= Model.Name #>Service(loggerMock.Object, dataAccessMock.Object);
            Assert.IsNotNull(sut);
        }
        
        [Test]
        public async Task Get<#= Model.Name #>_SholdNotBeNull()
        {
        <# if(identifierType == IdentifierTypes.Guid) { #>        
        var id3 = 3;
        <# } else { #>     
        var id3 = 3;x
        <# } #>
            dataAccessMock.Setup(x => x.Get(It.IsAny<<#= identifierType #>>())).Returns(Task.FromResult(new <#= Model.Name #> { Id = id3 }));
            var sut = new <#= Model.Name #>Service(loggerMock.Object, dataAccessMock.Object);
            var result = await sut.Get(id3);
            Assert.NotNull(result);
            Assert.AreEqual(id3, result.Id);
            loggerMock.VerifyLoggingExact(LogLevel.Information, $"Fetching entity with id {id3} from data source.");
        }

        [Test]
        public async Task GetAll<#= Model.Name #>s_SholdContainEntities()
        {
        <# if(identifierType == IdentifierTypes.Guid) { #>        
        var id1 = Guid.NewGuid();
        var id2 = Guid.NewGuid();
        var id3 = Guid.NewGuid();
        <# } else { #>     
        var id1 = 1;
        var id2 = 2;
        var id3 = 3;
        <# } #>
            var testData = new List<<#= Model.Name #>>
            {
                new <#= Model.Name #>{ Id = id1 },
                new <#= Model.Name #>{ Id = id2 },
                new <#= Model.Name #>{ Id = id3 }
            };
            dataAccessMock.Setup(x => x.GetAll()).Returns(Task.FromResult(testData.AsEnumerable()));
            var sut = new <#= Model.Name #>Service(loggerMock.Object, dataAccessMock.Object);
            var result = await sut.GetAll();
            Assert.AreEqual(3, result.Count());
            Assert.AreEqual(id1, result.First().Id);
            Assert.AreEqual(id3, result.Last().Id);
            loggerMock.VerifyLoggingExact(LogLevel.Information, "Fetching all entities from data source.");
        }

        [Test]
        public async Task Insert<#= Model.Name #>_VerifyInsertIsCalled()
        {
        <# if(identifierType == IdentifierTypes.Guid) { #>        
        var id1 = Guid.NewGuid();
        <# } else { #>     
        var id1 = 1;
        <# } #>
            var sut = new <#= Model.Name #>Service(loggerMock.Object, dataAccessMock.Object);
            await sut.Insert(new <#= Model.Name #> { Id = id1 });
            dataAccessMock.Verify(x => x.Insert(It.Is<<#= Model.Name #>>(y => y.Id == id1)));
            loggerMock.VerifyLoggingContains(LogLevel.Information, "Saving entity");
        }

        [Test]
        public async Task Update<#= Model.Name #>_VerifyUpdateIsCalled()
        {
        <# if(identifierType == IdentifierTypes.Guid) { #>        
        var id1 = Guid.NewGuid();
        <# } else { #>     
        var id1 = 1;
        <# } #>
            var sut = new <#= Model.Name #>Service(loggerMock.Object, dataAccessMock.Object);
            await sut.Update(new <#= Model.Name #> { Id = id1 });
            dataAccessMock.Verify(x => x.Update(It.Is<<#= Model.Name #>>(y => y.Id == id1)));
            loggerMock.VerifyLoggingContains(LogLevel.Information, "Update entity");
        }

        [Test]
        public async Task Delete<#= Model.Name #>_VerifyDeleteIsCalled()
        {
        <# if(identifierType == IdentifierTypes.Guid) { #>        
        var id1 = Guid.NewGuid();
        <# } else { #>     
        var id1 = 1;
        <# } #>
            var sut = new <#= Model.Name #>Service(loggerMock.Object, dataAccessMock.Object);
            await sut.Delete(id1);
            dataAccessMock.Verify(x => x.Delete(It.Is<<#= identifierType #>>(y => y == id1)));
            loggerMock.VerifyLoggingExact(LogLevel.Information, $"Deleting entity with id {id1} from data source.");
        }
    }
}
