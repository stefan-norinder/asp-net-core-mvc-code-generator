// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CodeGenerator.Lib.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Stefan Adm\code\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\SqlStringBuilderTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class SqlStringBuilderTemplate : SqlStringBuilderTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 6 "C:\Users\Stefan Adm\code\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\SqlStringBuilderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeGeneratorHelper.GetTemplateHeaderText()));
            
            #line default
            #line hidden
            this.Write(" \r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing " +
                    "System.Reflection;\r\n\r\nnamespace ");
            
            #line 13 "C:\Users\Stefan Adm\code\asp-net-core-mvc-code-generator\CodeGenerator.Lib\Templates\SqlStringBuilderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(namespaceName));
            
            #line default
            #line hidden
            this.Write(".Logic.DataAccess\r\n{\r\n       public class SqlStringBuilder<T>\r\n    {\r\n        pri" +
                    "vate BuilderType type;\r\n\r\n        private enum BuilderType\r\n        {\r\n         " +
                    "   Insert = 1,\r\n            Update = 2\r\n        }\r\n\r\n        public string GetIn" +
                    "sertString(T entity, string table)\r\n        {\r\n            return GetInsertStrin" +
                    "g(entity, true, default(int), table);\r\n        }\r\n\r\n        public string GetIns" +
                    "ertString(T entity, int nextId, string table)\r\n        {\r\n            return Get" +
                    "InsertString(entity, false, nextId, table);\r\n        }\r\n\r\n        private string" +
                    " GetInsertString(T entity, bool hasIdentityColumn, int nextId, string table)\r\n  " +
                    "      {\r\n            type = BuilderType.Insert;\r\n            var dictionary = Ge" +
                    "tDictionary(entity);\r\n            return dictionary.CreateInsertString<T>(hasIde" +
                    "ntityColumn, nextId, table);\r\n        }\r\n\r\n        public string GetUpdateString" +
                    "(T entity, string table)\r\n        {\r\n            type = BuilderType.Update;\r\n   " +
                    "         var dictionary = GetDictionary(entity);\r\n            return dictionary." +
                    "CreateUpdateString<T>(table);\r\n        }\r\n\r\n        #region private\r\n\r\n        p" +
                    "rivate Dictionary<string, string> GetDictionary(T entity)\r\n        {\r\n          " +
                    "  var dictionary = new Dictionary<string, string>();\r\n            foreach (Prope" +
                    "rtyInfo pi in typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instanc" +
                    "e))\r\n            {\r\n                if ((type == BuilderType.Insert || type == B" +
                    "uilderType.Update) && pi.GetCustomAttribute(typeof(SqlInsertIgnoreAttribute)) !=" +
                    " null) continue;\r\n                string value;\r\n                if (pi.Property" +
                    "Type == typeof(DateTime) && (PropertyIsNull(entity, pi) || PropertyIsDateTimeNul" +
                    "lRepresentation(entity, pi)))\r\n                {\r\n                    value = nu" +
                    "ll;\r\n                }\r\n                else if (PropertyIsNull(entity, pi))\r\n  " +
                    "              {\r\n                    value = null;\r\n                }\r\n         " +
                    "       else if (pi.PropertyType == typeof(string))\r\n                {\r\n         " +
                    "           var str = pi.GetValue(entity).ToString();\r\n                    value " +
                    "= str.Replace(\"\'\", \"\'\'\");\r\n                }\r\n                else if (pi.Proper" +
                    "tyType == typeof(DateTime))\r\n                {\r\n                    var dateTime" +
                    " = (DateTime) pi.GetValue(entity);\r\n                    var formattedDateTimeStr" +
                    "ing = dateTime.ToString(\"yyyy-MM-ddTHH:mm:ss\");\r\n                    value = for" +
                    "mattedDateTimeString.Replace(\"\'\", \"\'\'\");\r\n                }\r\n                els" +
                    "e if (pi.PropertyType == typeof(DateTime?))\r\n                {\r\n                " +
                    "    var dateTime = (DateTime?) pi.GetValue(entity);\r\n                   if(!date" +
                    "Time.HasValue) \r\n                    {\r\n                        value = null;\r\n " +
                    "                   }\r\n                    else\r\n                    {\r\n         " +
                    "               var formattedDateTimeString = dateTime.Value.ToString(\"yyyy-MM-dd" +
                    "THH:mm:ss\");\r\n                        value = formattedDateTimeString.Replace(\"\'" +
                    "\", \"\'\'\");\r\n                    }\r\n                }\r\n                else\r\n     " +
                    "           {\r\n                    value = pi.GetValue(entity).ToString();\r\n     " +
                    "           }\r\n                dictionary.Add(pi.Name, value);\r\n            }\r\n\r\n" +
                    "            return dictionary;\r\n        }\r\n\r\n        private static bool Propert" +
                    "yIsDateTimeNullRepresentation(T entity, PropertyInfo pi)\r\n        {\r\n           " +
                    " DateTime dateTime;\r\n            var entityAsString = pi.GetValue(entity).ToStri" +
                    "ng();\r\n            if (!DateTime.TryParse(entityAsString, out dateTime))\r\n      " +
                    "      {\r\n                return false;\r\n            }\r\n            return dateTi" +
                    "me == DateTime.MinValue;\r\n        }\r\n\r\n        private static bool PropertyIsNul" +
                    "l(T entity, PropertyInfo pi)\r\n        {\r\n            return pi.GetValue(entity) " +
                    "== null;\r\n        }\r\n\r\n        #endregion\r\n    }\r\n\r\n    public static partial cl" +
                    "ass StringExtentions\r\n    {\r\n        public static string RemoveLast(this string" +
                    " str, int numberOfCharactersToRemove)\r\n        {\r\n            return str.Remove(" +
                    "str.Length - numberOfCharactersToRemove);\r\n        }\r\n    }\r\n    \r\n    public st" +
                    "atic partial class DictionaryExtentions\r\n    {\r\n        public static string Cre" +
                    "ateInsertString<T>(this Dictionary<string, string> dictionary, bool hasIdentityC" +
                    "olumn, int nextId, string table)\r\n        {\r\n            var insertStringHead = " +
                    "$\"insert into {table} (\";\r\n            var insertStringTail = \" output inserted." +
                    "[Id] values (\";\r\n            foreach (var item in dictionary)\r\n            {\r\n  " +
                    "              if (item.Key == \"Id\" && hasIdentityColumn) continue;\r\n            " +
                    "    insertStringHead += $\"[{item.Key}], \";\r\n                var value = ColumnIs" +
                    "IdAndNextIdIsSet(nextId, item.Key) ? nextId.ToString() : dictionary[item.Key];\r\n" +
                    "                insertStringTail += value == null ? \"NULL, \" : \"\'\" + value + \"\'," +
                    " \";\r\n            }\r\n            insertStringHead = insertStringHead.RemoveLast(2" +
                    ");\r\n            insertStringTail = insertStringTail.RemoveLast(2);\r\n\r\n          " +
                    "  return insertStringHead + \") \" + insertStringTail + \")\";\r\n        }\r\n\r\n       " +
                    " private static bool ColumnIsIdAndNextIdIsSet(int nextId, string column)\r\n      " +
                    "  {\r\n            return column == \"Id\" && nextId > 0;\r\n        }\r\n\r\n        publ" +
                    "ic static string CreateUpdateString<T>(this Dictionary<string, string> dictionar" +
                    "y, string table)\r\n        {\r\n            var updateString = $\"update {table} set" +
                    " \";\r\n            foreach (var item in dictionary.Where(x => x.Key.ToLower() != \"" +
                    "id\"))\r\n            {\r\n                var value = dictionary[item.Key];\r\n\r\n     " +
                    "           var valueString = value == null ? \"NULL, \" : \"\'\" + value + \"\', \";\r\n\r\n" +
                    "                updateString += $\"[{item.Key}] = {valueString}\";\r\n\r\n            " +
                    "}\r\n            updateString = updateString.RemoveLast(2);\r\n\r\n            updateS" +
                    "tring += \" where Id = \" + dictionary[\"Id\"];\r\n\r\n            return updateString;\r" +
                    "\n        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class SqlStringBuilderTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
