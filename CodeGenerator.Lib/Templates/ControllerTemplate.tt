<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#= CodeGeneratorHelper.GetTemplateHeaderText($"The point of using `I{Model.Name}HttpService` instead of `I{Model.Name}Service` is just to show an example of this.") #> 

using AutoMapper;
using <#= namespaceName #>.Logic.Http;
using <#= namespaceName #>.Logic.Model;
using <#= namespaceName #>.Logic.Services;
using <#= namespaceName #>.Web.ViewModel;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Http;

namespace <#= namespaceName #>.Web.Controllers
{
    public class <#= Model.Name #>Controller : Controller
    {
        private readonly ILogger<<#= Model.Name #>Controller> logger;
        private readonly I<#= Model.Name #>Service service;
        private readonly I<#= Model.Name #>HttpService httpService;
        private readonly IMapper mapper;
        private readonly string apiBaseUrl;

        public <#= Model.Name #>Controller(ILogger<<#= Model.Name #>Controller> logger, 
        I<#= Model.Name #>Service service, 
        IMapper mapper, 
        I<#= Model.Name #>HttpService httpService, 
        IHttpContextAccessor httpContextAccessor)
        {
            this.logger = logger;
            this.service = service;
            this.mapper = mapper;
            this.httpService = httpService;
            apiBaseUrl = GetApiBaseUrl(httpContextAccessor);
        }

        public async Task<IActionResult> Index()
        {
            var list = await httpService.Get(apiBaseUrl);
            var viewModels = mapper.Map<IEnumerable<<#= Model.Name #>ViewModel>>(list);
            return View(viewModels);
        }
        
        public ActionResult Create()
        {
            return View();
        }

        [HttpPost]
        public async Task<ActionResult> Create([FromForm]<#= Model.Name #>ViewModel viewModel)
        {
            var model = mapper.Map<<#= Model.Name #>>(viewModel);
            await httpService.Post(apiBaseUrl, model);
            return RedirectToAction(nameof(Index));
        }

        public async Task<ActionResult> Edit(int id)
        {
            var entity = await httpService.Get(apiBaseUrl,id.ToString());
            return View(mapper.Map<<#= Model.Name #>ViewModel>(entity));
        }


        [HttpPost]
        public async Task<ActionResult> Edit([FromForm]<#= Model.Name #>ViewModel viewModel)
        {
            var model = mapper.Map<<#= Model.Name #>>(viewModel);
            await httpService.Put(apiBaseUrl, viewModel.Id.ToString(), model);
            return RedirectToAction(nameof(Index));         
        }

        public async Task<ActionResult> Remove(int id)
        {
            var entity = await httpService.Get(apiBaseUrl, id.ToString());
            return View(mapper.Map<<#= Model.Name #>ViewModel>(entity));        
        }

        [HttpPost]
        public async Task<ActionResult> Remove([FromForm]<#= Model.Name #>ViewModel viewModel)
        {
            var model = mapper.Map<<#= Model.Name #>>(viewModel);
            await httpService.Delete(apiBaseUrl, viewModel.Id.ToString());
            return RedirectToAction(nameof(Index));         
        }

        #region private 

        private string GetApiBaseUrl(IHttpContextAccessor httpContextAccessor)
        {
            var schema = httpContextAccessor.HttpContext.Request.Scheme;
            var host = httpContextAccessor.HttpContext.Request.Host.Value;
            var path = "/person";
            return $"{schema}://{host}/api/v1{path}s";
        }

        #endregion
    }
}