<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#= CodeGeneratorHelper.GetTemplateHeaderText() #> 

using AutoMapper;
using <#= namespaceName #>.Logic.Model;
using <#= namespaceName #>.Logic.Services;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using System;
using DatabaseTest.Web.ViewModel;
using System.Collections.Generic;

namespace <#= namespaceName #>.Web.Controllers
{
    public class <#= Model.Name #>Controller : Controller
    {
        private readonly ILogger<<#= Model.Name #>Controller> logger;
        private readonly I<#= Model.Name #>Service service;
        private readonly IMapper mapper;

        public <#= Model.Name #>Controller(ILogger<<#= Model.Name #>Controller> logger, 
        I<#= Model.Name #>Service service, 
        IMapper mapper)
        {
            this.logger = logger;
            this.service = service;
            this.mapper = mapper;
        }

        public async Task<IActionResult> Index()
        {
            try
            {
                var list = await service.GetAll();
                var viewModels = mapper.Map < IEnumerable<<#= Model.Name #>ViewModel>>(list);
                return View(viewModels);
            }
            catch (Exception e)
            {
                LogError(e);
                return new BadRequestResult();
            }
        }
        
         public ActionResult Create()
        {
            return View();
        }

        [HttpPost]
        public async Task<ActionResult> Create([FromForm]<#= Model.Name #>ViewModel viewModel)
        {
            try
            {                
                var model = mapper.Map<<#= Model.Name #>>(viewModel);
                await service.Insert(model);
                return RedirectToAction(nameof(Index));
            }
            catch (Exception e)
            {
                LogError(e);
                return new BadRequestResult();
            }
        }

       public async Task<ActionResult> Edit(int id)
        {
            try
            {   
                var entity = await service.Get(id);
                return View(mapper.Map<<#= Model.Name #>ViewModel>(entity));
            }
            catch (Exception e)
            {
                LogError(e);
                return new BadRequestResult();
            }
        }


        [HttpPost]
        public async Task<ActionResult> Edit([FromForm]<#= Model.Name #>ViewModel viewModel)
        {
            try
            {                
                var model = mapper.Map<<#= Model.Name #>>(viewModel);
                await service.Update(model);
                return RedirectToAction(nameof(Index));
            }
            catch (Exception e)
            {
                LogError(e);
                return new BadRequestResult();
            }
        }

        public async Task<ActionResult> Remove(int id)
        {
            try
            {   
                var entity = await service.Get(id);
                return View(mapper.Map<<#= Model.Name #>ViewModel>(entity));
            }            
            catch (Exception e)
            {
                LogError(e);
                return new BadRequestResult();
            }
        }

        [HttpPost]
        public async Task<ActionResult> Remove([FromForm]<#= Model.Name #>ViewModel viewModel)
        {
            try
            {                
                var model = mapper.Map<<#= Model.Name #>>(viewModel);
                await service.Delete(model.Id);
                return RedirectToAction(nameof(Index));
            }
            catch (Exception e)
            {
                LogError(e);
                return new BadRequestResult();
            }
        }

        #region private 

        private void LogError(Exception e)
        {
            logger.LogError(e, e.Message);
        }

        #endregion
    }
}