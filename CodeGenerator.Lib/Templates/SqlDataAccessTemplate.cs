// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CodeGenerator.Lib.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Stefan Adm\code\dotnet-core-mvc-code-generator\CodeGenerator.Lib\Templates\SqlDataAccessTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class SqlDataAccessTemplate : SqlDataAccessTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"//---------------------------------------------------------------------------------------
// This is an auto generated file. Don't make any changes because they may be overwritten
//---------------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Data;
using System.Threading.Tasks;
using System;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Configuration;
using System.Data.SqlClient;
using Dapper;

namespace ");
            
            #line 19 "C:\Users\Stefan Adm\code\dotnet-core-mvc-code-generator\CodeGenerator.Lib\Templates\SqlDataAccessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(namespaceName));
            
            #line default
            #line hidden
            this.Write(".Lib.DataAccess\r\n{\r\n\r\n    public interface ISqlDataAccess\r\n    {\r\n        Task<T>" +
                    " LoadSingularData<T, U>(string sql, U parameters);\r\n        Task<List<T>> LoadDa" +
                    "ta<T, U>(string sql, U parameters);\r\n        Task SaveData<T>(string sql, T para" +
                    "meters);\r\n        T LoadSingularDataSynchronous<T, U>(string sql, U parameters);" +
                    "\r\n    }\r\n\r\n    public class SqlDataAccess : ISqlDataAccess\r\n    {\r\n        priva" +
                    "te string _connectionString;\r\n        private readonly ILogger logger;\r\n\r\n      " +
                    "  public SqlDataAccess(IConfiguration iconfiguration,\r\n            ILogger<SqlDa" +
                    "taAccess> logger)\r\n        {\r\n            _connectionString = iconfiguration.Get" +
                    "ConnectionString(\"Default\");\r\n            this.logger = logger;\r\n        }\r\n\r\n  " +
                    "      public async Task<T> LoadSingularData<T, U>(string sql, U parameters)\r\n   " +
                    "     {\r\n            using (IDbConnection connection = new SqlConnection(_connect" +
                    "ionString))\r\n            {\r\n                try\r\n                {\r\n            " +
                    "        return await connection.QueryFirstOrDefaultAsync<T>(sql, parameters);\r\n " +
                    "               }\r\n                catch (Exception e)\r\n                {\r\n      " +
                    "              LogException(e);\r\n                    connection.Close();\r\n       " +
                    "             throw;\r\n                }\r\n            }\r\n        }\r\n\r\n        publ" +
                    "ic async Task<List<T>> LoadData<T, U>(string sql, U parameters)\r\n        {\r\n    " +
                    "        using (IDbConnection connection = new SqlConnection(_connectionString))\r" +
                    "\n            {\r\n                try\r\n                {\r\n                    var " +
                    "data = await connection.QueryAsync<T>(sql, parameters);\r\n                    ret" +
                    "urn data.AsList();\r\n                }\r\n                catch (Exception e)\r\n    " +
                    "            {\r\n                    LogException(e);\r\n                    connect" +
                    "ion.Close();\r\n                    throw;\r\n                }\r\n            }\r\n    " +
                    "    }\r\n\r\n        public T LoadSingularDataSynchronous<T, U>(string sql, U parame" +
                    "ters)\r\n        {\r\n            using (IDbConnection connection = new SqlConnectio" +
                    "n(_connectionString))\r\n            {\r\n                try\r\n                {\r\n  " +
                    "                  return connection.QueryFirstOrDefault<T>(sql, parameters);\r\n  " +
                    "              }\r\n                catch (Exception e)\r\n                {\r\n       " +
                    "             LogException(e);\r\n                    connection.Close();\r\n        " +
                    "            throw;\r\n                }\r\n            }\r\n        }\r\n\r\n        publi" +
                    "c async Task SaveData<T>(string sql, T parameters)\r\n        {\r\n            using" +
                    " (IDbConnection connection = new SqlConnection(_connectionString))\r\n            " +
                    "{\r\n                try\r\n                {\r\n                    await connection." +
                    "ExecuteAsync(sql, parameters);\r\n                }\r\n                catch (SqlExc" +
                    "eption e)\r\n                {\r\n                    if (e.Message.Contains(\"Violat" +
                    "ion of UNIQUE KEY constraint\"))\r\n                    {\r\n                        " +
                    "logger.LogWarning(e.Message);\r\n                    }\r\n                    else\r\n" +
                    "                    {\r\n                        LogException(e);\r\n               " +
                    "         connection.Close();\r\n                        throw;\r\n                  " +
                    "  }\r\n                }\r\n                catch (Exception e)\r\n                {\r\n" +
                    "                    LogException(e);\r\n                    connection.Close();\r\n " +
                    "                   throw;\r\n                }\r\n            }\r\n        }\r\n\r\n      " +
                    "  #region private \r\n\r\n        private void LogException(Exception e)\r\n        {\r" +
                    "\n            logger.LogError(e, \"An error occured when quering data from data so" +
                    "urce\");\r\n        }\r\n\r\n        #endregion\r\n\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class SqlDataAccessTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
