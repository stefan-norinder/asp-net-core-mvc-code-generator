<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#= CodeGeneratorHelper.GetTemplateHeaderText() #> 

using AutoMapper;
using Localization;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Diagnostics;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Localization;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Root.Logic.DataAccess;
using Root.Logic.Http;
using Root.Logic.Model;
using Root.Logic.Services;
using Root.Logic.Settings;
using Root.Web.ViewModel;
using System.Collections.Generic;
using System.Globalization;
using System.Net;
using System.Threading.Tasks;
using System;

namespace <#= namespaceName #>.Web
{
    public class Startup
    {       
        public Startup(IConfiguration configuration, IWebHostEnvironment environment)
        {
            Configuration = configuration;
            Environment = environment;
        }

        public IConfiguration Configuration { get; }
        public IWebHostEnvironment Environment { get; }

        public void ConfigureServices(IServiceCollection services)
        {
<# foreach(var item in Model) { #>
            #region register <#= item #>
            services.AddTransient<I<#= item #>Service, <#= item #>Service>();
            services.AddTransient<I<#= item #>HttpService, <#= item #>HttpService>();
            services.AddTransient<I<#= item #>DataAccess, <#= item #>DataAccess>();
            services.AddSingleton<SqlStringBuilder<<#= item #>>>();
            #endregion

<# } #>
            services.AddSingleton<LocService>();
            services.AddTransient<IHttpClient, Logic.Http.HttpClient>();
            services.Configure<AuthenticationSettings>(Configuration.GetSection("Authentication"));
            services.Configure<ApplicationSettings>(Configuration.GetSection("Application"));
            services.AddTransient<ISqlDataAccess, SqlDataAccess>();
            
            services.AddHttpClient();
            services.AddSingleton(GetMapper());
            ConfigureLocalization(services);
            services.AddLocalization(x => x.ResourcesPath = "Resources");
            CustomServiceConfiguration(services);
            services.AddControllersWithViews()
                .AddViewLocalization();
        }

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            app.UseHttpsRedirection();
            app.UseStaticFiles();
            app.UseRouting();
            app.UseRequestLocalization();
            ConfigureExceptionHandler(app);
            CustomConfiguration(app, env);            
            app.UseMiddleware<RedirectTablelang>();    

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Home}/{action=Index}/{id?}");
            });
        }

        protected virtual void CustomServiceConfiguration(IServiceCollection services)
        {
            //override for custom behaviour
        }

        protected virtual void CustomConfiguration(IApplicationBuilder app, IWebHostEnvironment env)
        {
            //override for custom behaviour
        }
        
         protected void ConfigureLocalization(IServiceCollection services)
        {
            var supportedCultures = GetSupportedLanguages();

            services.Configure((Action<RequestLocalizationOptions>)(options =>
            {
                options.DefaultRequestCulture = GetDefaultCulture();
                options.SupportedCultures = supportedCultures;
                options.SupportedUICultures = supportedCultures;
                options.RequestCultureProviders = new List<IRequestCultureProvider>
                {
                  new QueryStringRequestCultureProvider(),
                  new CookieRequestCultureProvider()
                };
            }));
        }

        protected virtual RequestCulture GetDefaultCulture() => new RequestCulture("en-gb");

        protected virtual IList<CultureInfo> GetSupportedLanguages()
        {
            return new List<CultureInfo> {
                new CultureInfo("en-gb")
            };
        }

        protected virtual void ConfigureExceptionHandler(IApplicationBuilder app)
        {
            app.UseExceptionHandler(builder =>
            {
                builder.Run(async context =>
                {
                    var e = context.Features.Get<IExceptionHandlerFeature>();
                    if (e == null) return;
                    context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;
                    context.Response.ContentType = "text/html";
                    var factory = builder.ApplicationServices.GetService<ILoggerFactory>();
                    var logger = factory.CreateLogger("ExceptionLogger");
                    logger.LogError(e.Error, e.Error.Message);
                    context.Response.Redirect("/error");
                });
            });
        }

        public virtual IMapper GetMapper()
        {
            var mapperConfig = new MapperConfiguration(mc =>
            {
                mc.AddProfile(new MappingConfiguration());
            });

            return mapperConfig.CreateMapper();
        }
    }
        public class MappingConfiguration : Profile
        {
            public MappingConfiguration()
            {
        
<# foreach(var item in Model) { #>
                CreateMap<<#= item #>, <#= item #>ViewModel>();

                CreateMap<<#= item #>ViewModel, <#= item #>>();
        
<# } #>
    
            }
        }

        public class RedirectTablelang
        {
            private readonly RequestDelegate next;
            private readonly ApplicationSettings applicationSettings;

            public RedirectTablelang(RequestDelegate next, IOptions<ApplicationSettings> options)
            {
                this.next = next;
                applicationSettings = options.Value;
            }

            public async Task InvokeAsync(HttpContext context)
            {
                var applicationName = applicationSettings.Name;
                var path = context.Request.Path;
                var tableLangPath = $"{applicationName}/resources/tablelang";
                if (path.Value.EndsWith("resources/tablelang", StringComparison.InvariantCultureIgnoreCase) &&
                !path.Value.Equals(tableLangPath, StringComparison.InvariantCultureIgnoreCase))
                {
                    context.Response.StatusCode = 302;
                    context.Response.Headers["Location"] = tableLangPath;
                    return;
                }
                await next.Invoke(context);
            }
        }
}
