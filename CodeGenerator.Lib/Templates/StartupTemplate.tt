<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
//---------------------------------------------------------------------------------------
// Warning! This is an auto generated file. Changes may be overwritten 
//---------------------------------------------------------------------------------------

using AutoMapper;
using <#= namespaceName #>.Logic.DataAccess;
using <#= namespaceName #>.Logic.Model;
using <#= namespaceName #>.Logic.Services;
using <#= namespaceName #>.Web.ViewModel;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

namespace <#= namespaceName #>.Web
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
<# foreach(var item in Model) { #>
            services.AddTransient<I<#= item #>Service, <#= item #>Service>();
            services.AddTransient<I<#= item #>DataAccess, <#= item #>DataAccess>();
            services.AddSingleton<SqlStringBuilder<<#= item #>>>();
<# } #>
            services.AddTransient<ISqlDataAccess, SqlDataAccess>();

             var mapperConfig = new MapperConfiguration(mc =>
            {
                mc.AddProfile(new MappingConfiguration());
            });

            IMapper mapper = mapperConfig.CreateMapper();
            services.AddSingleton(mapper);

            services.AddControllersWithViews();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }
            app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Home}/{action=Index}/{id?}");
            });
        }
    }
        public class MappingConfiguration : Profile
        {
            public MappingConfiguration()
            {
        
<# foreach(var item in Model) { #>
                CreateMap<<#= item #>, <#= item #>ViewModel>();

                CreateMap<<#= item #>ViewModel, <#= item #>>();
        
<# } #>
    
            }
        }
}
